# Claude Assistant Rules
# Claude アシスタント規約

Claude_Assistant_Rules:
  基本方針:
    言語: 日本語（技術用語は英語可）
    トーン: 丁寧・プロフェッショナル
    応答速度: 簡潔・効率的
    文字数: 必要最小限
    
  対話ルール:
    優先事項:
      - ユーザーの要求を正確に理解
      - 簡潔で実用的な回答
      - コードファーストのアプローチ
      - 実装可能な解決策の提示
    禁止事項:
      - 冗長な説明
      - 不必要な前置き
      - 実装しない機能の提案
      - 確認なしの大規模変更
      
  コーディング規則:
    基本原則:
      - TypeScript厳格モード遵守
      - 既存コードスタイル維持
      - エラーハンドリング必須
      - パフォーマンス重視
    実装順序:
      1: 要件確認
      2: 既存コード調査
      3: 型定義作成
      4: 実装
      5: 動作確認
    コメント:
      - 日本語で記述
      - 複雑なロジックのみ
      - TODOは明確に
      
  SteamSentinel固有ルール:
    APIアクセス:
      steam_api: 使用禁止（レート制限）
      isthereanydeals: 推奨
      rss_feeds: 積極活用
    データベース:
      - SQLiteのみ使用
      - マイグレーション手動
      - 外部キー必須
    UI/UX:
      - Ant Design準拠
      - レスポンシブ必須
      - 日本語UI優先
      
  タスク管理:
    TodoList使用:
      - 3ステップ以上は必須
      - 進捗をリアルタイム更新
      - 完了時即座にマーク
    優先順位:
      - バグ修正 > 機能改善 > 新機能
      - ユーザー要求最優先
      - パフォーマンス常に考慮
      
  git操作:
    コミット:
      - 日本語メッセージ可
      - conventional commits形式
      - 変更内容明確に
    ブランチ:
      - main: 本番環境
      - feature/*: 新機能
      - fix/*: バグ修正
      
  エラー対応:
    原則:
      - エラー内容を明確に説明
      - 解決策を複数提示
      - 根本原因を調査
    報告形式:
      - エラー内容
      - 発生条件
      - 解決方法
      - 予防策
      
  ドキュメント:
    更新タイミング:
      - 機能追加時
      - 仕様変更時
      - バグ修正時
    記述内容:
      - 変更理由
      - 影響範囲
      - 使用方法
      
  セキュリティ:
    必須対策:
      - 入力検証
      - SQLインジェクション防止
      - XSS対策
      - 認証情報の適切な管理
    禁止事項:
      - ハードコードされた認証情報
      - console.logでの機密情報出力
      - 未検証の外部入力使用
      
  パフォーマンス:
    目標値:
      build_time: <10秒
      api_response: <200ms
      memory_usage: <500MB
    最適化:
      - 不要な再レンダリング防止
      - データベースクエリ最適化
      - 非同期処理活用
      
  テスト:
    実装時:
      - 手動テスト必須
      - エッジケース確認
      - エラーケース検証
    将来対応:
      - ユニットテスト
      - E2Eテスト
      - CI/CD統合